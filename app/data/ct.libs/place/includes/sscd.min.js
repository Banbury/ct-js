// SSCD (Super Simple Collision Detection) is distributed with the zlib-license:

/* 
  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.


  Made by Ronen Ness
  ronenness@gmail.com
  
  Modified by CoMiGo Games
  admin@nersta.ru

*/

var SSCD=(function(){var SSCD=SSCD||{};SSCD.VERSION=1.5;SSCD.Math={};SSCD.Math.to_radians=function(degrees){return degrees*Math.PI/180};SSCD.Math.to_degrees=function(radians){return radians*180/Math.PI};SSCD.Math.distance=function(p1,p2){var dx=p2.x-p1.x,dy=p2.y-p1.y;return Math.sqrt(dx*dx+dy*dy)};SSCD.Math.dist2=function(p1,p2){var dx=p2.x-p1.x,dy=p2.y-p1.y;return(dx*dx+dy*dy)};SSCD.Math.angle=function(P1,P2){var deltaY=P2.y-P1.y,deltaX=P2.x-P1.x;return Math.atan2(deltaY,deltaX)*180/Math.PI};SSCD.Math.distance_to_line=function(p,v,w){var l2=SSCD.Math.dist2(v,w);var t=((p.x-v.x)*(w.x-v.x)+(p.y-v.y)*(w.y-v.y))/l2;if(t<0){return SSCD.Math.distance(p,v)}if(t>1){return SSCD.Math.distance(p,w)}return SSCD.Math.distance(p,{x:v.x+t*(w.x-v.x),y:v.y+t*(w.y-v.y)})};SSCD.Math.line_intersects=function(p0,p1,p2,p3){var s1_x,s1_y,s2_x,s2_y;s1_x=p1.x-p0.x;s1_y=p1.y-p0.y;s2_x=p3.x-p2.x;s2_y=p3.y-p2.y;var s,t;s=(-s1_y*(p0.x-p2.x)+s1_x*(p0.y-p2.y))/(-s2_x*s1_y+s1_x*s2_y);t=(s2_x*(p0.y-p2.y)-s2_y*(p0.x-p2.x))/(-s2_x*s1_y+s1_x*s2_y);if(s>=0&&s<=1&&t>=0&&t<=1){return 1}return 0;};SSCD.Math.is_on_line=function(v,l1,l2){return SSCD.Math.distance_to_line(v,l1,l2)<=5};SSCD.Math.angles_dis=function(a0,a1){a0=SSCD.Math.to_radians(a0);a1=SSCD.Math.to_radians(a1);var max=Math.PI*2;var da=(a1-a0)%max;var distance=2*da%max-da;distance=SSCD.Math.to_degrees(distance);return Math.abs(distance)};SSCD.Vector=function(x,y){this.x=x;this.y=y};SSCD.Vector.prototype={get_name:function(){return "vector"},clone:function(){return new SSCD.Vector(this.x,this.y)},set:function(vector){this.x=vector.x;this.y=vector.y},flip:function(){return new SSCD.Vector(this.y,this.x)},flip_self:function(){this.y=[this.x,this.x=this.y][0];return this},negative:function(){return this.multiply_scalar(-1)},negative_self:function(){this.multiply_scalar_self(-1);return this},distance_from:function(other){return SSCD.Math.distance(this,other)},angle_from:function(other){return SSCD.Math.angle(this,other)},move:function(vector){this.x+=vector.x;this.y+=vector.y;return this},normalize_self:function(){var by=Math.sqrt(this.x*this.x+this.y*this.y);if(by===0){return this}this.x/=by;this.y/=by;return this},normalize:function(){return this.clone().normalize_self()},add_self:function(other){this.x+=other.x;this.y+=other.y;return this},sub_self:function(other){this.x-=other.x;this.y-=other.y;return this},divide_self:function(other){this.x/=other.x;this.y/=other.y;return this},multiply_self:function(other){this.x*=other.x;this.y*=other.y;return this},add_scalar_self:function(val){this.x+=val;this.y+=val;return this},sub_scalar_self:function(val){this.x-=val;this.y-=val;return this},divide_scalar_self:function(val){this.x/=val;this.y/=val;return this},multiply_scalar_self:function(val){this.x*=val;this.y*=val;return this},add:function(other){return this.clone().add_self(other)},sub:function(other){return this.clone().sub_self(other)},multiply:function(other){return this.clone().multiply_self(other)},divide:function(other){return this.clone().divide_self(other)},add_scalar:function(val){return this.clone().add_scalar_self(val)},sub_scalar:function(val){return this.clone().sub_scalar_self(val)},multiply_scalar:function(val){return this.clone().multiply_scalar_self(val)},divide_scalar:function(val){return this.clone().divide_scalar_self(val)},clamp:function(min,max){if(this.x<min){this.x=min}if(this.y<min){this.y=min}if(this.x>max){this.x=max}if(this.y>max){this.y=max}return this},from_radian:function(rad){this.x=Math.cos(rad);this.y=Math.sin(rad);return this},from_angle:function(angle){return this.from_radian(SSCD.Math.to_radians(angle))},apply_self:function(func){this.x=func(this.x);this.y=func(this.y);return this},apply:function(func){return this.clone().apply_self(func)},debug:function(){console.debug(this.x+", "+this.y)}};SSCD.Vector.ZERO=new SSCD.Vector(0,0);SSCD.Vector.ONE=new SSCD.Vector(1,1);SSCD.Vector.UP=new SSCD.Vector(0,-1);SSCD.Vector.DOWN=new SSCD.Vector(0,1);SSCD.Vector.LEFT=new SSCD.Vector(-1,0);SSCD.Vector.RIGHT=new SSCD.Vector(1,0);SSCD.Vector.UP_LEFT=new SSCD.Vector(-1,-1);SSCD.Vector.DOWN_LEFT=new SSCD.Vector(-1,1);SSCD.Vector.UP_RIGHT=new SSCD.Vector(1,-1);SSCD.Vector.DOWN_RIGHT=new SSCD.Vector(1,1);SSCD.extend=function(base,child){for(var prop in base){if(child[prop]){continue}child[prop]=base[prop]}child.__inits=child.__inits||[];if(base.__init__){child.__inits.push(base.__init__)}child.init=function(){for(var i=0;i<this.__inits.length;i+=1){this.__curr_init_func=this.__inits[i];this.__curr_init_func()}delete this.__curr_init_func}};SSCD.NotImplementedError=function(message){this.name="NotImplementedError";this.message=(message||"")};SSCD.NotImplementedError.prototype=Error.prototype;SSCD.AABB=function(position,size){this.position=position.clone();this.size=size.clone()};SSCD.AABB.prototype={expand:function(other){var min_x=Math.min(this.position.x,other.position.x);var min_y=Math.min(this.position.y,other.position.y);var max_x=Math.max(this.position.x+this.size.x,other.position.x+other.size.x);var max_y=Math.max(this.position.y+this.size.y,other.position.y+other.size.y);this.position.x=min_x;this.position.y=min_y;this.size.x=max_x-min_x;this.size.y=max_y-min_y},add_vector:function(vector){var push_pos_x=this.position.x-vector.x;if(push_pos_x>0){this.position.x-=push_pos_x;this.size.x+=push_pos_x}var push_pos_y=this.position.y-vector.y;if(push_pos_y>0){this.position.y-=push_pos_y;this.size.y+=push_pos_y}var push_size_x=vector.x-(this.position.x+this.size.x);if(push_size_x>0){this.size.x+=push_size_x}var push_size_y=vector.y-(this.position.y+this.size.y);if(push_size_y>0){this.size.y+=push_size_y}},clone:function(){return new SSCD.AABB(this.position,this.size)}};SSCD.Shape=function(){};SSCD.Shape.prototype={__type:'shape',__collision_type:null,is_shape:true,__data:null,__next_id:0,__init__(){this.__position=new SSCD.Vector()},test_collide_with(obj){return SSCD.CollisionManager.test_collision(this,obj)},repel(obj,force,iterations,factor_self,factor_other){force=force||1;iterations=iterations||1;if(factor_self===void 0){factor_self=0}if(factor_other===void 0){factor_other=1}var push_vector_other,push_vector_self;var push_vector=this.get_repel_direction(obj).multiply_scalar_self(force);if(factor_other){push_vector_other=push_vector.multiply_scalar(factor_other)}if(factor_self){push_vector_self=push_vector.multiply_scalar(factor_self*-1)}var ret=SSCD.Vector.ZERO.clone();var collide=true;while(collide&&iterations>0){iterations-=1;if(push_vector_other){obj.move(push_vector_other)}if(push_vector_self){this.move(push_vector_self)}ret.add_self(push_vector);collide=this.test_collide_with(obj)}return ret},get_repel_direction(obj){var center=this.get_abs_center();var other_center;if(obj instanceof SSCD.Vector){other_center=obj}else{other_center=obj.get_abs_center()}return other_center.sub(center).normalize_self()},set_data(obj){this.__data=obj;return this},get_data(){return this.__data},get_name(){return this.__type},set_position(vector){this.__position.x=vector.x;this.__position.y=vector.y;this.__update_position();return this},get_position(){return this.__position.clone()},move(vector){this.set_position(this.__position.add(vector));return this},__update_position(){if(this.__update_position_hook){this.__update_position_hook()}if(this.__aabb){this.__update_aabb_pos()}},__update_aabb_pos(){this.__aabb.position=this.__position},get_abs_center(){var aabb=this.get_aabb();return aabb.position.add(aabb.size.multiply_scalar(0.5))},reset_aabb(){this.__aabb=void 0},__update_position_hook:null,build_aabb(){throw new SSCD.NotImplementedError()},get_aabb(){this.__aabb=this.__aabb||this.build_aabb();return this.__aabb}};SSCD.Circle=function(position,radius){this.init();this.__radius=radius;this.__size=new SSCD.Vector(radius,radius).multiply_scalar_self(2);this.set_position(position)};SSCD.Circle.prototype={__type:'circle',__collision_type:'circle',get_radius(){return this.__radius},__update_aabb_pos(){this.__aabb.position=this.__position.sub_scalar(this.__radius)},build_aabb(){return new SSCD.AABB(this.__position.sub_scalar(this.__radius),this.__size)},get_abs_center(){return this.__position.clone()}};SSCD.extend(SSCD.Shape.prototype,SSCD.Circle.prototype);SSCD.Rectangle=function(position,size){this.init();this.__size=size;this.set_position(position)};SSCD.Rectangle.prototype={__type:'rectangle',__collision_type:'rectangle',get_size(){return this.__size.clone()},build_aabb(){return new SSCD.AABB(this.__position,this.__size)},get_top_left(){this.__top_left_c=this.__top_left_c||this.__position.clone();return this.__top_left_c},get_bottom_left(){this.__bottom_left_c=this.__bottom_left_c||this.__position.add(new SSCD.Vector(0,this.__size.y));return this.__bottom_left_c},get_top_right(){this.__top_right_c=this.__top_right_c||this.__position.add(new SSCD.Vector(this.__size.x,0));return this.__top_right_c},get_bottom_right(){this.__bottom_right_c=this.__bottom_right_c||this.__position.add(new SSCD.Vector(this.__size.x,this.__size.y));return this.__bottom_right_c},get_abs_center(){this.__abs_center_c=this.__abs_center_c||this.__position.add(this.__size.divide_scalar(2));return this.__abs_center_c},__update_position_hook(){this.__top_left_c=void 0;this.__top_right_c=void 0;this.__bottom_left_c=void 0;this.__bottom_right_c=void 0;this.__abs_center_c=void 0}};SSCD.extend(SSCD.Shape.prototype,SSCD.Rectangle.prototype);SSCD.Line=function(source,dest){this.init();this.__dest=dest;this.set_position(source)};SSCD.Line.prototype={__type:'line',__collision_type:'line',build_aabb(){var pos=new SSCD.Vector(0,0);pos.x=this.__dest.x>0?this.__position.x:this.__position.x+this.__dest.x;pos.y=this.__dest.y>0?this.__position.y:this.__position.y+this.__dest.y;var size=this.__dest.apply(Math.abs);return new SSCD.AABB(pos,size)},get_p1(){this.__p1_c=this.__p1_c||this.__position.clone();return this.__p1_c},get_p2(){this.__p2_c=this.__p2_c||this.__position.add(this.__dest);return this.__p2_c},__update_position_hook(){this.__p1_c=void 0;this.__p2_c=void 0}};SSCD.extend(SSCD.Shape.prototype,SSCD.Line.prototype);SSCD.LineStrip=function(position,points,closed){this.init();this.__points=points;if(points.length<=1){throw new SSCD.IllegalActionError('Not enough vectors for LineStrip (got to have at least two vectors)')}if(closed){this.__points.push(this.__points[0])}this.set_position(position)};SSCD.LineStrip.prototype={__type:'line-strip',__collision_type:'line-strip',get_abs_lines(){if(this.__abs_lines_c){return this.__abs_lines_c}var points=this.get_abs_points();var ret=[];for(var i=0;i<points.length-1;i+=1){ret.push([points[i],points[i+1]])}this.__abs_lines_c=ret;return ret},get_abs_points(){if(this.__abs_points_c){return this.__abs_points_c}var ret=[];for(var i=0;i<this.__points.length;i+=1){ret.push(this.__points[i].add(this.__position))}this.__abs_points_c=ret;return ret},__update_position_hook(){this.__abs_points_c=void 0;this.__abs_lines_c=void 0},__update_aabb_pos(){this.__aabb.position.set(this.__aabb_offset_c.add(this.__position))},build_aabb(){var ret=new SSCD.AABB(SSCD.Vector.ZERO,SSCD.Vector.ZERO);for(var i=0;i<this.__points.length;i+=1){ret.add_vector(this.__points[i])}this.__aabb_offset_c=ret.position.clone();ret.position.add_self(this.__position);return ret}};SSCD.extend(SSCD.Shape.prototype,SSCD.LineStrip.prototype);SSCD.CompositeShape=function(position,objects){this.init();this.__init_comp_shape(position,objects)};SSCD.CompositeShape.prototype={__type:'composite-shape',__collision_type:'composite-shape',__init_comp_shape(position,objects){this.__shapes=[];position=position||SSCD.Vector.ZERO;this.set_position(position);if(objects){for(var i=0;i<objects.length;i+=1){this.add(objects[i])}}},repel(obj,force,iterations,factor_self,factor_other){var ret=SSCD.Vector.ZERO.clone();for(var i=0;i<this.__shapes.length;i+=1){var shape=this.__shapes[i].shape;if(shape.test_collide_with(obj)){ret.add_self(shape.repel(obj,force,iterations,0,factor_other))}}if((factor_self||0)!==0){this.move(ret.multiply_scalar(factor_self*-1))}return ret},get_shapes(){if(this.__shapes_list_c){return this.__shapes_list_c}var ret=[];for(var i=0;i<this.__shapes.length;i+=1){ret.push(this.__shapes[i].shape)}this.__shapes_list_c=ret;return ret},build_aabb(){if(this.__shapes.length===0){this.__aabb_pos_offset_c=SSCD.Vector.ZERO;return new SSCD.AABB(SSCD.Vector.ZERO,SSCD.Vector.ZERO)}var ret=null;for(var i=0;i<this.__shapes.length;i+=1){var curr_aabb=this.__shapes[i].shape.get_aabb();if(ret){ret.expand(curr_aabb)}else{ret=curr_aabb}}this.__aabb_pos_offset_c=ret.position.sub(this.__position);return ret},__update_aabb_pos(){this.__aabb.position=this.__position.add(this.__aabb_pos_offset_c)},add(shape){var offset=shape.__position;this.__shapes_list_c=void 0;this.__shapes.push({shape:shape,offset:offset.clone()});shape.set_position(this.__position.add(offset));this.reset_aabb();shape.__collision_tags_val=this.__collision_tags_val;shape.__collision_tags=this.__collision_tags;shape.__override_fill_color=this.__override_fill_color;shape.__override_stroke_color=this.__override_stroke_color;return shape},__update_tags_hook(){for(var i=0;i<this.__shapes;i+=1){var shape=this.__shapes[i].shape;shape.__collision_tags_val=this.__collision_tags_val;shape.__collision_tags=this.__collision_tags}},remove(shape){this.__shapes_list_c=void 0;for(var i=0;i<this.__shapes.length;i+=1){if(this.__shapes[i].shape===shape){this.__shapes.splice(i,1);return}}throw new SSCD.IllegalActionError("Shape to remove is not in composite shape!")},__update_position_hook(){for(var i=0;i<this.__shapes.length;i+=1){this.__shapes[i].shape.set_position(this.__position.add(this.__shapes[i].offset))}}};SSCD.extend(SSCD.Shape.prototype,SSCD.CompositeShape.prototype);SSCD.Capsule=function(position,size,standing){this.init();if(standing===void 0){standing=true}objects=[];if(standing){size=size.clone();size.y-=size.x;objects.push(new SSCD.Rectangle(new SSCD.Vector(-size.x*0.5,-size.y*0.5),size));objects.push(new SSCD.Circle(new SSCD.Vector(0,-size.y*0.5),size.x*0.5));objects.push(new SSCD.Circle(new SSCD.Vector(0,size.y*0.5),size.x*0.5))}else{size=size.clone();size.y-=size.x;objects.push(new SSCD.Rectangle(new SSCD.Vector(-size.y*0.5,-size.x*0.5),size.flip()));objects.push(new SSCD.Circle(new SSCD.Vector(-size.y*0.5,0),size.x*0.5));objects.push(new SSCD.Circle(new SSCD.Vector(size.y*0.5,0),size.x*0.5))}this.__init_comp_shape(position,objects)};SSCD.Capsule.prototype={__type:"capsule"};SSCD.extend(SSCD.CompositeShape.prototype,SSCD.Capsule.prototype);SSCD.CollisionManager={test_collision(a,b){if(a instanceof SSCD.Vector&&b instanceof SSCD.Vector){return this._test_collision_vector_vector(a,b)}if(a.__collision_type=='composite-shape'){return this._test_collision_composite_shape(a,b)}if(b.__collision_type=='composite-shape'){return this._test_collision_composite_shape(b,a)}if(a instanceof SSCD.Vector&&b.__collision_type=='circle'){return this._test_collision_circle_vector(b,a)}if(a.__collision_type=='circle'&&b instanceof SSCD.Vector){return this._test_collision_circle_vector(a,b)}if(a.__collision_type=='circle'&&b.__collision_type=='circle'){return this._test_collision_circle_circle(b,a)}if(a.__collision_type=='circle'&&b.__collision_type=='rectangle'){return this._test_collision_circle_rect(a,b)}if(a.__collision_type=='rectangle'&&b.__collision_type=='circle'){return this._test_collision_circle_rect(b,a)}if(a.__collision_type=='circle'&&b.__collision_type=='line'){return this._test_collision_circle_line(a,b)}if(a.__collision_type=='line'&&b.__collision_type=='circle'){return this._test_collision_circle_line(b,a)}if(a.__collision_type=='line-strip'&&b.__collision_type=='line'){return this._test_collision_linestrip_line(a,b)}if(a.__collision_type=='line'&&b.__collision_type=='line-strip'){return this._test_collision_linestrip_line(b,a)}if(a.__collision_type=='circle'&&b.__collision_type=='line-strip'){return this._test_collision_circle_linestrip(a,b)}if(a.__collision_type=='line-strip'&&b.__collision_type=='circle'){return this._test_collision_circle_linestrip(b,a)}if(a instanceof SSCD.Vector&&b.__collision_type=='rectangle'){return this._test_collision_rect_vector(b,a)}if(a.__collision_type=='rectangle'&&b instanceof SSCD.Vector){return this._test_collision_rect_vector(a,b)}if(a.__collision_type=='rectangle'&&b.__collision_type=='rectangle'){return this._test_collision_rect_rect(b,a)}if(a.__collision_type=='line-strip'&&b.__collision_type=='line-strip'){return this._test_collision_linestrip_linestrip(a,b)}if(a.__collision_type=='line'&&b.__collision_type=='rectangle'){return this._test_collision_rect_line(b,a)}if(a.__collision_type=='rectangle'&&b.__collision_type=='line'){return this._test_collision_rect_line(a,b)}if(a.__collision_type=='line-strip'&&b.__collision_type=='rectangle'){return this._test_collision_rect_linestrip(b,a)}if(a.__collision_type=='rectangle'&&b.__collision_type=='line-strip'){return this._test_collision_rect_linestrip(a,b)}if(a.__collision_type=='line'&&b.__collision_type=='line'){return this._test_collision_line_line(a,b)}if(a.__collision_type=='line'&&b instanceof SSCD.Vector){return this._test_collision_vector_line(b,a)}if(a instanceof SSCD.Vector&&b.__collision_type=='line'){return this._test_collision_vector_line(a,b)}if(a.__collision_type=='line-strip'&&b instanceof SSCD.Vector){return this._test_collision_vector_linestrip(b,a)}if(a instanceof SSCD.Vector&&b.__collision_type=='line-strip'){return this._test_collision_vector_linestrip(a,b)}throw new SSCD.UnsupportedShapes(a,b)},_test_collision_vector_vector(a,b){return(a.x===b.x)&&(a.y===b.y)},_test_collision_circle_vector(circle,vector){return SSCD.Math.distance(circle.__position,vector)<=circle.__radius},_test_collision_circle_circle(a,b){return SSCD.Math.distance(a.__position,b.__position)<=a.__radius+b.__radius},_test_collision_rect_vector(rect,vector){return(vector.x>=rect.__position.x)&&(vector.y>=rect.__position.y)&&(vector.x<=rect.__position.x+rect.__size.x)&&(vector.y<=rect.__position.y+rect.__size.y)},_test_collision_vector_line(v,line){return SSCD.Math.is_on_line(v,line.get_p1(),line.get_p2())},_test_collision_vector_linestrip(v,linestrip){var lines=linestrip.get_abs_lines();for(var i=0;i<lines.length;i+=1){if(SSCD.Math.is_on_line(v,lines[i][0],lines[i][1])){return true}}return false},_test_collision_circle_line(circle,line){return SSCD.Math.distance_to_line(circle.__position,line.get_p1(),line.get_p2())<=circle.__radius},_test_collision_circle_linestrip(circle,linestrip){var lines=linestrip.get_abs_lines();for(var i=0;i<lines.length;i+=1){if(SSCD.Math.distance_to_line(circle.__position,lines[i][0],lines[i][1])<=circle.__radius){return true}}return false},_test_collision_linestrip_line(linestrip,line){var lines=linestrip.get_abs_lines();var p1=line.get_p1(),p2=line.get_p2();for(var i=0;i<lines.length;i+=1){if(SSCD.Math.line_intersects(p1,p2,lines[i][0],lines[i][1])){return true}}return false},_test_collision_line_line(a,b){return SSCD.Math.line_intersects(a.get_p1(),a.get_p2(),b.get_p1(),b.get_p2())},_test_collision_rect_line(rect,line){var p1=line.get_p1();var p2=line.get_p2();if(SSCD.CollisionManager._test_collision_rect_vector(rect,p1)||SSCD.CollisionManager._test_collision_rect_vector(rect,p2)){return true}var r1=rect.get_top_left();var r2=rect.get_bottom_left();if(SSCD.Math.line_intersects(p1,p2,r1,r2)){return true}var r3=rect.get_top_right();var r4=rect.get_bottom_right();if(SSCD.Math.line_intersects(p1,p2,r3,r4)){return true}if(SSCD.Math.line_intersects(p1,p2,r1,r3)){return true}if(SSCD.Math.line_intersects(p1,p2,r2,r4)){return true}return false},_test_collision_rect_linestrip(rect,linesstrip){var points=linesstrip.get_abs_points();for(var i=0;i<points.length;i+=1){if(this._test_collision_rect_vector(rect,points[i])){return true}}var r1=rect.get_top_left();var r2=rect.get_bottom_left();var r3=rect.get_top_right();var r4=rect.get_bottom_right();var lines=linesstrip.get_abs_lines();for(var i=0;i<lines.length;i+=1){var p1=lines[i][0];var p2=lines[i][1];if(SSCD.Math.line_intersects(p1,p2,r1,r2)){return true}if(SSCD.Math.line_intersects(p1,p2,r3,r4)){return true}if(SSCD.Math.line_intersects(p1,p2,r1,r3)){return true}if(SSCD.Math.line_intersects(p1,p2,r2,r4)){return true}}return false},_test_collision_linestrip_linestrip(strip1,strip2){var lines1=strip1.get_abs_lines();var lines2=strip2.get_abs_lines();for(var i=0;i<lines1.length;i+=1){for(var j=0;j<lines2.length;j+=1){if(SSCD.Math.line_intersects(lines1[i][0],lines1[i][1],lines2[j][0],lines2[j][1])){return true}}}return false},_test_collision_composite_shape(composite,other){var comp_shapes=composite.get_shapes();if(other.__collision_type=='composite-shape'){var other_shapes=other.get_shapes();for(var i=0;i<comp_shapes.length;i+=1){for(var j=0;j<other_shapes.length;j+=1){if(SSCD.CollisionManager.test_collision(comp_shapes[i],other_shapes[j])){return true}}}}else{for(var i=0;i<comp_shapes.length;i+=1){if(SSCD.CollisionManager.test_collision(comp_shapes[i],other)){return true}}}return false},_test_collision_circle_rect(circle,rect){var circle_pos=circle.__position;var collide=SSCD.CollisionManager._test_collision_rect_vector(rect,circle_pos);if(collide){return true}var rect_center=rect.get_abs_center();var collide=SSCD.CollisionManager._test_collision_circle_vector(circle,rect_center);if(collide){return true}var lines=[];if(rect_center.x>circle_pos.x){lines.push([rect.get_top_left(),rect.get_bottom_left()])}else{lines.push([rect.get_top_right(),rect.get_bottom_right()])}if(rect_center.y>circle_pos.y){lines.push([rect.get_top_left(),rect.get_top_right()])}else{lines.push([rect.get_bottom_left(),rect.get_bottom_right()])}for(var i=0;i<lines.length;i+=1){var dist_to_line=SSCD.Math.distance_to_line(circle_pos,lines[i][0],lines[i][1]);if(dist_to_line<=circle.__radius){return true}}return false},_test_collision_rect_rect(a,b){var r1={left:a.__position.x,right:a.__position.x+a.__size.x,top:a.__position.y,bottom:a.__position.y+a.__size.y};var r2={left:b.__position.x,right:b.__position.x+b.__size.x,top:b.__position.y,bottom:b.__position.y+b.__size.y};return!(r2.left>r1.right||r2.right<r1.left||r2.top>r1.bottom||r2.bottom<r1.top)}};SSCD.UnsupportedShapes=function(a,b){this.name='Unsupported Shapes';this.message='Unsupported shapes collision test! \''+a.get_name()+'\' <-> \''+b.get_name()+'\'.'};SSCD.UnsupportedShapes.prototype=Error.prototype;return SSCD})();if(typeof exports!=="undefined"){exports.sscd=SSCD}